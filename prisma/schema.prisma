generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  name             String        @default("name")
  lastname         String?
  bio              String?
  username         String?       @unique
  email            String        @unique
  password         String
  status           UserStatus    @default(OFFLINE)
  verification     Verification?
  isVerified       Boolean       @default(false)
  token            Token?
  messages         Message[]
  userInDialogs    Dialog[]      @relation("UserInDialogs")
  partnerInDialogs Dialog[]      @relation("PartnerInDialogs")
  chats            Chat[]
  updatedAt        DateTime      @updatedAt
  createdAt        DateTime      @default(now())
}

enum UserStatus {
  ONLINE
  OFFLINE
}

model Verification {
  id               Int      @id @default(autoincrement())
  verificationCode String?
  user             User     @relation(fields: [userId], references: [id])
  userId           Int      @unique
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())
}

model Token {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  refreshToken String   @db.Text
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

model Dialog {
  id              Int          @id @default(autoincrement())
  title           String
  status          DialogStatus @default(NONE)
  pinnedMessage   Message?     @relation("pinned", fields: [pinnedMessageId], references: [id])
  pinnedMessageId Int?
  user            User         @relation("UserInDialogs", fields: [userId], references: [id])
  userId          Int
  partner         User         @relation("PartnerInDialogs", fields: [partnerId], references: [id])
  partnerId       Int
  messages        Message[]
  chat            Chat         @relation(fields: [chatId], references: [id])
  chatId          Int
  updatedAt       DateTime     @updatedAt
  createdAt       DateTime     @default(now())

  @@unique([userId, partnerId])
}

enum DialogStatus {
  NONE
  TYPING
}

model Chat {
  id        Int      @id @default(autoincrement())
  users     User[]
  dialogs   Dialog[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Message {
  id             Int       @id @default(autoincrement())
  message        String    @db.Text
  read           Boolean   @default(false)
  dialogs        Dialog[]
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  pinnedIn       Dialog[]  @relation("pinned")
  replyMessage   Message?  @relation("replies", fields: [replyMessageId], references: [id])
  replyMessageId Int?
  replies        Message[] @relation("replies")
  updatedAt      DateTime  @updatedAt
  createdAt      DateTime  @default(now())
}
